# -*- coding: utf-8 -*-
"""getting data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eolEqJtJR-CrjrWN5sRqCm9Byebv5lyA
"""

# Specify the name that is used to seach for the data
place_name = "Ступино, Московская область, RU"

!pip install osmnx

!pip install geojson

!pip install h3

import osmnx as ox
import geopandas as gpd

# Get place boundary related to the place name as a geodataframe
area = ox.geocode_to_gdf(place_name)

!pip install contextily
import contextily as cx

import geopandas as gpd
import numpy as np
import json
import h3
import folium
import osmnx as ox
from shapely import wkt
from folium.plugins import HeatMap
from shapely.geometry import Polygon
from folium.plugins import MarkerCluster, HeatMap
import pandas as pd
from shapely.geometry import Polygon
from geojson import Feature, Point, FeatureCollection, Polygon
import plotly.express as px
from tqdm import tqdm

tqdm.pandas()

area

type(area.geometry)

area.plot()

drive = ox.graph_from_place(place_name, network_type='drive')
ox.plot_graph(drive)

walk = ox.graph_from_place(place_name, network_type='walk')
ox.plot_graph(walk)

tags = {'amenity': True, 'landuse': ['retail', 'commercial'], 'shop': True, 'office': True, 'tourism': True}   

items = ox.geometries_from_place(place_name, tags)
items

df_wm = items.to_crs(epsg=3857)

df_wm

item_plot = df_wm.plot(figsize=(20,20), alpha = 1)
cx.add_basemap(item_plot)
# cx.add_basemap(item_plot, source=cx.providers.Stamen.TonerLite)
# cx.add_basemap(item_plot, source=cx.providers.Stamen.WaterColor)
# cx.add_basemap(item_plot, source=cx.providers.Stamen.TonerLabels)

df_wm = items

list(df_wm.columns)

type(df_wm)

print(df_wm["amenity"].unique ())

for i in ['library', 'police', 'bench', 'bench_basket', 'bus_station', 'courthouse', 'place_of_worship', 'fontain', 'customs', 'townhail', 'fire_station', 'monastery' ]:
  df_filter_amenity = df_wm[items.amenity != i]

print(df_filter_amenity["tourism"].unique ())

for i in ['attraction', 'information' ]:
  df_filter_tourism = df_filter_amenity[df_filter_amenity.amenity != i]

print(df_filter_tourism["office"].unique ())

for i in ['government']:
  df_filter_office = df_filter_tourism[df_filter_tourism.amenity != i]

print(df_filter_office["shop"].unique ())

import geopandas as gpd
import numpy as np
import json
import h3
import folium
import osmnx as ox
from shapely import wkt
from folium.plugins import HeatMap
from shapely.geometry import Polygon
from folium.plugins import MarkerCluster, HeatMap
import pandas as pd
from shapely.geometry import Polygon
from geojson import Feature, Point, FeatureCollection, Polygon
import plotly.express as px
from tqdm import tqdm

tqdm.pandas()

import matplotlib.pyplot as plt

df1 = df_filter_office

df1['geometry']

# df1['center_point'] = df1['geometry'].centroid
# #Extract lat and lon from the centerpoint
# df_wm["long"] = df_wm.Center_point.map(lambda p: p.x)
# df_wm["lat"] = df_wm.Center_point.map(lambda p: p.y)

df1['geometry'] = df1['geometry'].centroid

# df1 = pd.DataFrame(df_wm)

H3_res = 10  # размер гексагона [1 .. 15] чем больше, тем меньше площадь


def geo_to_h3(row):
    return h3.geo_to_h3(lat=row.geometry.x, lng=row.geometry.x, resolution=H3_res)


df1['h3_cell'] = df1.progress_apply(geo_to_h3, axis=1)

# df1.lat

df1 = df1.reset_index()

df1

df1_g = df1.groupby("h3_cell")["osmid"].count().reset_index()

df1_g

# aa = list(set(df1['amenity']))
# ak = {i: k for k, i in enumerate(aa)}
# aki = {k:i for k, i in enumerate(aa)}

# def aggr(amenities, aa=aa, ak=ak):
#   a = np.zeros(len(aa))
#   for i in amenities:
#     a[ak[i]] +=1
#   return

# # df1_g = df1.groupby("h3_cell")["amenity"]
# # list(df1.columns)
# # df1[['fuel:diesel','fuel:octane_92','fuel:octane_95','shop', 'parking']]
# df1_c = df1.groupby("h3_cell")["amenity"].apply(aggr).reset_index()

# df1_c

# ams = pd.DataFrame(df1_c.amenity.to_list(), index= df1_c.h3_cell)
# ams.rename(columns=aki, inplace=True)
# ams

# ams.reset_index()

df1_g.columns

df1_g.rename(columns = {'h3_cell':'h3_cell','osmid':'count'}, inplace = True )

# df1_g = (df1
#         .groupby('h3_cell')
#       )
# # Let's count each points inside the hexagon

df1_g

from shapely.geometry import Polygon

def add_geometry(row):
    points = h3.h3_to_geo_boundary(row['h3_cell'], True)
    return Polygon(points)

df1_g['geometry'] = (df1_g.progress_apply(add_geometry, axis=1))

df1_g['geometry']

def hexagons_dataframe_to_geojson(df_hex, hex_id_field, geometry_field, value_field, file_output=None):
    list_features = []

    for i, row in df_hex.iterrows():
        feature = Feature(geometry=row[geometry_field],
                          id=row[hex_id_field],
                          properties={"value": row[value_field]})
        list_features.append(feature)

    feat_collection = FeatureCollection(list_features)

    if file_output is not None:
        with open(file_output, "w") as f:
            json.dump(feat_collection, f)

    else:
        return feat_collection

geojson_obj = (hexagons_dataframe_to_geojson
               (df1_g,
                hex_id_field='h3_cell',
                value_field='count',
                geometry_field='geometry'))

df1.geometry.x.mean(), df1.geometry.y.mean()

df_plot = df1.to_crs(epsg=3857)

df1_plot

df1_plot = gpd.GeoDataFrame(df1_g, geometry='geometry')

df1_plot

import plotly.express as px

fig = px.choropleth_mapbox(
    df1_plot,
    geojson=geojson_obj,
    locations='h3_cell',
    color='count',
    color_continuous_scale="Viridis",
    range_color=(0, df1_plot['count'].mean()),
    mapbox_style='carto-positron',
    zoom=1,
    center={"lat": df_plot.geometry.x.mean(), "lon": df_plot.geometry.y.mean()},# 54.886280, "lon": 38.078237},
    opacity=0.1,
    labels={'count': 'count of data'})
fig.update_layout(margin={"r": 0, "t": 0, "l": 0, "b": 0})
fig.show("notebook")
fig

